// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

#[cfg(feature = "v1_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v1_4")))]
use glib::prelude::*;
use glib::translate::*;

glib::wrapper! {
    #[doc(alias = "PanelMenuManager")]
    pub struct MenuManager(Object<ffi::PanelMenuManager, ffi::PanelMenuManagerClass>);

    match fn {
        type_ => || ffi::panel_menu_manager_get_type(),
    }
}

impl MenuManager {
    #[doc(alias = "panel_menu_manager_new")]
    pub fn new() -> MenuManager {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(ffi::panel_menu_manager_new()) }
    }

    #[cfg(feature = "v1_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_4")))]
    #[doc(alias = "panel_menu_manager_find_item_by_id")]
    pub fn find_item_by_id(&self, id: &str) -> (Option<gio::Menu>, u32) {
        unsafe {
            let mut position = std::mem::MaybeUninit::uninit();
            let ret = from_glib_none(ffi::panel_menu_manager_find_item_by_id(
                self.to_glib_none().0,
                id.to_glib_none().0,
                position.as_mut_ptr(),
            ));
            (ret, position.assume_init())
        }
    }

    #[cfg(feature = "v1_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_4")))]
    #[doc(alias = "panel_menu_manager_get_menu_by_id")]
    #[doc(alias = "get_menu_by_id")]
    pub fn menu_by_id(&self, menu_id: &str) -> gio::Menu {
        unsafe {
            from_glib_none(ffi::panel_menu_manager_get_menu_by_id(
                self.to_glib_none().0,
                menu_id.to_glib_none().0,
            ))
        }
    }

    #[cfg(feature = "v1_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_4")))]
    #[doc(alias = "panel_menu_manager_get_menu_ids")]
    #[doc(alias = "get_menu_ids")]
    pub fn menu_ids(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::panel_menu_manager_get_menu_ids(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(feature = "v1_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_4")))]
    #[doc(alias = "panel_menu_manager_merge")]
    pub fn merge(&self, menu_id: &str, menu_model: &impl IsA<gio::MenuModel>) -> u32 {
        unsafe {
            ffi::panel_menu_manager_merge(
                self.to_glib_none().0,
                menu_id.to_glib_none().0,
                menu_model.as_ref().to_glib_none().0,
            )
        }
    }

    #[cfg(feature = "v1_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_4")))]
    #[doc(alias = "panel_menu_manager_remove")]
    pub fn remove(&self, merge_id: u32) {
        unsafe {
            ffi::panel_menu_manager_remove(self.to_glib_none().0, merge_id);
        }
    }

    #[cfg(feature = "v1_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_4")))]
    #[doc(alias = "panel_menu_manager_set_attribute_string")]
    pub fn set_attribute_string(
        &self,
        menu: &gio::Menu,
        position: u32,
        attribute: &str,
        value: &str,
    ) {
        unsafe {
            ffi::panel_menu_manager_set_attribute_string(
                self.to_glib_none().0,
                menu.to_glib_none().0,
                position,
                attribute.to_glib_none().0,
                value.to_glib_none().0,
            );
        }
    }
}

impl Default for MenuManager {
    fn default() -> Self {
        Self::new()
    }
}
