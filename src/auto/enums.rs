// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use glib::translate::*;
use glib::value::FromValue;
use glib::value::ToValue;
use glib::StaticType;
use glib::Type;
use std::fmt;

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "PanelDockPosition")]
pub enum DockPosition {
    #[doc(alias = "PANEL_DOCK_POSITION_START")]
    Start,
    #[doc(alias = "PANEL_DOCK_POSITION_END")]
    End,
    #[doc(alias = "PANEL_DOCK_POSITION_TOP")]
    Top,
    #[doc(alias = "PANEL_DOCK_POSITION_BOTTOM")]
    Bottom,
    #[doc(alias = "PANEL_DOCK_POSITION_CENTER")]
    Center,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for DockPosition {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "DockPosition::{}",
            match *self {
                Self::Start => "Start",
                Self::End => "End",
                Self::Top => "Top",
                Self::Bottom => "Bottom",
                Self::Center => "Center",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for DockPosition {
    type GlibType = ffi::PanelDockPosition;

    fn into_glib(self) -> ffi::PanelDockPosition {
        match self {
            Self::Start => ffi::PANEL_DOCK_POSITION_START,
            Self::End => ffi::PANEL_DOCK_POSITION_END,
            Self::Top => ffi::PANEL_DOCK_POSITION_TOP,
            Self::Bottom => ffi::PANEL_DOCK_POSITION_BOTTOM,
            Self::Center => ffi::PANEL_DOCK_POSITION_CENTER,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::PanelDockPosition> for DockPosition {
    unsafe fn from_glib(value: ffi::PanelDockPosition) -> Self {
        skip_assert_initialized!();
        match value {
            ffi::PANEL_DOCK_POSITION_START => Self::Start,
            ffi::PANEL_DOCK_POSITION_END => Self::End,
            ffi::PANEL_DOCK_POSITION_TOP => Self::Top,
            ffi::PANEL_DOCK_POSITION_BOTTOM => Self::Bottom,
            ffi::PANEL_DOCK_POSITION_CENTER => Self::Center,
            value => Self::__Unknown(value),
        }
    }
}

impl StaticType for DockPosition {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::panel_dock_position_get_type()) }
    }
}

impl glib::value::ValueType for DockPosition {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for DockPosition {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for DockPosition {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}
