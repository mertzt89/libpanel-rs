// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files
// DO NOT EDIT

use crate::Dock;
use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "PanelDockSwitcher")]
    pub struct DockSwitcher(Object<ffi::PanelDockSwitcher, ffi::PanelDockSwitcherClass>) @extends gtk::Widget, @implements gtk::Accessible, gtk::Buildable, gtk::ConstraintTarget;

    match fn {
        type_ => || ffi::panel_dock_switcher_get_type(),
    }
}

impl DockSwitcher {
    #[doc(alias = "panel_dock_switcher_new")]
    pub fn new() -> DockSwitcher {
        assert_initialized_main_thread!();
        unsafe { gtk::Widget::from_glib_none(ffi::panel_dock_switcher_new()).unsafe_cast() }
    }

    #[doc(alias = "panel_dock_switcher_get_dock")]
    #[doc(alias = "get_dock")]
    pub fn dock(&self) -> Option<Dock> {
        unsafe { from_glib_none(ffi::panel_dock_switcher_get_dock(self.to_glib_none().0)) }
    }

    #[doc(alias = "panel_dock_switcher_set_dock")]
    pub fn set_dock(&self, dock: &impl IsA<Dock>) {
        unsafe {
            ffi::panel_dock_switcher_set_dock(
                self.to_glib_none().0,
                dock.as_ref().to_glib_none().0,
            );
        }
    }

    #[doc(alias = "dock")]
    pub fn connect_dock_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_dock_trampoline<F: Fn(&DockSwitcher) + 'static>(
            this: *mut ffi::PanelDockSwitcher,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::dock\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_dock_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl Default for DockSwitcher {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for DockSwitcher {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("DockSwitcher")
    }
}
