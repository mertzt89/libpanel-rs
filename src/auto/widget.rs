// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use crate::{Position, SaveDelegate};
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::{boxed::Box as Box_, fmt, mem::transmute};

glib::wrapper! {
    #[doc(alias = "PanelWidget")]
    pub struct Widget(Object<ffi::PanelWidget, ffi::PanelWidgetClass>) @extends gtk::Widget, @implements gtk::Accessible, gtk::Buildable, gtk::ConstraintTarget;

    match fn {
        type_ => || ffi::panel_widget_get_type(),
    }
}

impl Widget {
    pub const NONE: Option<&'static Widget> = None;

    #[doc(alias = "panel_widget_new")]
    pub fn new() -> Widget {
        assert_initialized_main_thread!();
        unsafe { gtk::Widget::from_glib_none(ffi::panel_widget_new()).unsafe_cast() }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`Widget`] objects.
    ///
    /// This method returns an instance of [`WidgetBuilder`](crate::builders::WidgetBuilder) which can be used to create [`Widget`] objects.
    pub fn builder() -> WidgetBuilder {
        WidgetBuilder::new()
    }
}

impl Default for Widget {
    fn default() -> Self {
        Self::new()
    }
}

// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`Widget`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct WidgetBuilder {
    builder: glib::object::ObjectBuilder<'static, Widget>,
}

impl WidgetBuilder {
    fn new() -> Self {
        Self {
            builder: glib::object::Object::builder(),
        }
    }

    pub fn can_maximize(self, can_maximize: bool) -> Self {
        Self {
            builder: self.builder.property("can-maximize", can_maximize),
        }
    }

    pub fn child(self, child: &impl IsA<gtk::Widget>) -> Self {
        Self {
            builder: self.builder.property("child", child.clone().upcast()),
        }
    }

    pub fn icon(self, icon: &impl IsA<gio::Icon>) -> Self {
        Self {
            builder: self.builder.property("icon", icon.clone().upcast()),
        }
    }

    pub fn icon_name(self, icon_name: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("icon-name", icon_name.into()),
        }
    }

    pub fn id(self, id: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("id", id.into()),
        }
    }

    pub fn kind(self, kind: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("kind", kind.into()),
        }
    }

    pub fn menu_model(self, menu_model: &impl IsA<gio::MenuModel>) -> Self {
        Self {
            builder: self
                .builder
                .property("menu-model", menu_model.clone().upcast()),
        }
    }

    pub fn modified(self, modified: bool) -> Self {
        Self {
            builder: self.builder.property("modified", modified),
        }
    }

    pub fn needs_attention(self, needs_attention: bool) -> Self {
        Self {
            builder: self.builder.property("needs-attention", needs_attention),
        }
    }

    pub fn reorderable(self, reorderable: bool) -> Self {
        Self {
            builder: self.builder.property("reorderable", reorderable),
        }
    }

    pub fn save_delegate(self, save_delegate: &impl IsA<SaveDelegate>) -> Self {
        Self {
            builder: self
                .builder
                .property("save-delegate", save_delegate.clone().upcast()),
        }
    }

    pub fn title(self, title: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("title", title.into()),
        }
    }

    #[cfg(feature = "v1_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_2")))]
    pub fn tooltip(self, tooltip: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("tooltip", tooltip.into()),
        }
    }

    pub fn can_focus(self, can_focus: bool) -> Self {
        Self {
            builder: self.builder.property("can-focus", can_focus),
        }
    }

    pub fn can_target(self, can_target: bool) -> Self {
        Self {
            builder: self.builder.property("can-target", can_target),
        }
    }

    pub fn css_classes(self, css_classes: impl Into<glib::StrV>) -> Self {
        Self {
            builder: self.builder.property("css-classes", css_classes.into()),
        }
    }

    pub fn css_name(self, css_name: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("css-name", css_name.into()),
        }
    }

    pub fn cursor(self, cursor: &gdk::Cursor) -> Self {
        Self {
            builder: self.builder.property("cursor", cursor.clone()),
        }
    }

    pub fn focus_on_click(self, focus_on_click: bool) -> Self {
        Self {
            builder: self.builder.property("focus-on-click", focus_on_click),
        }
    }

    pub fn focusable(self, focusable: bool) -> Self {
        Self {
            builder: self.builder.property("focusable", focusable),
        }
    }

    pub fn halign(self, halign: gtk::Align) -> Self {
        Self {
            builder: self.builder.property("halign", halign),
        }
    }

    pub fn has_tooltip(self, has_tooltip: bool) -> Self {
        Self {
            builder: self.builder.property("has-tooltip", has_tooltip),
        }
    }

    pub fn height_request(self, height_request: i32) -> Self {
        Self {
            builder: self.builder.property("height-request", height_request),
        }
    }

    pub fn hexpand(self, hexpand: bool) -> Self {
        Self {
            builder: self.builder.property("hexpand", hexpand),
        }
    }

    pub fn hexpand_set(self, hexpand_set: bool) -> Self {
        Self {
            builder: self.builder.property("hexpand-set", hexpand_set),
        }
    }

    pub fn layout_manager(self, layout_manager: &impl IsA<gtk::LayoutManager>) -> Self {
        Self {
            builder: self
                .builder
                .property("layout-manager", layout_manager.clone().upcast()),
        }
    }

    pub fn margin_bottom(self, margin_bottom: i32) -> Self {
        Self {
            builder: self.builder.property("margin-bottom", margin_bottom),
        }
    }

    pub fn margin_end(self, margin_end: i32) -> Self {
        Self {
            builder: self.builder.property("margin-end", margin_end),
        }
    }

    pub fn margin_start(self, margin_start: i32) -> Self {
        Self {
            builder: self.builder.property("margin-start", margin_start),
        }
    }

    pub fn margin_top(self, margin_top: i32) -> Self {
        Self {
            builder: self.builder.property("margin-top", margin_top),
        }
    }

    pub fn name(self, name: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("name", name.into()),
        }
    }

    pub fn opacity(self, opacity: f64) -> Self {
        Self {
            builder: self.builder.property("opacity", opacity),
        }
    }

    pub fn overflow(self, overflow: gtk::Overflow) -> Self {
        Self {
            builder: self.builder.property("overflow", overflow),
        }
    }

    pub fn receives_default(self, receives_default: bool) -> Self {
        Self {
            builder: self.builder.property("receives-default", receives_default),
        }
    }

    pub fn sensitive(self, sensitive: bool) -> Self {
        Self {
            builder: self.builder.property("sensitive", sensitive),
        }
    }

    pub fn tooltip_markup(self, tooltip_markup: impl Into<glib::GString>) -> Self {
        Self {
            builder: self
                .builder
                .property("tooltip-markup", tooltip_markup.into()),
        }
    }

    pub fn tooltip_text(self, tooltip_text: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("tooltip-text", tooltip_text.into()),
        }
    }

    pub fn valign(self, valign: gtk::Align) -> Self {
        Self {
            builder: self.builder.property("valign", valign),
        }
    }

    pub fn vexpand(self, vexpand: bool) -> Self {
        Self {
            builder: self.builder.property("vexpand", vexpand),
        }
    }

    pub fn vexpand_set(self, vexpand_set: bool) -> Self {
        Self {
            builder: self.builder.property("vexpand-set", vexpand_set),
        }
    }

    pub fn visible(self, visible: bool) -> Self {
        Self {
            builder: self.builder.property("visible", visible),
        }
    }

    pub fn width_request(self, width_request: i32) -> Self {
        Self {
            builder: self.builder.property("width-request", width_request),
        }
    }

    pub fn accessible_role(self, accessible_role: gtk::AccessibleRole) -> Self {
        Self {
            builder: self.builder.property("accessible-role", accessible_role),
        }
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`Widget`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Widget {
        self.builder.build()
    }
}

pub trait PanelWidgetExt: 'static {
    #[doc(alias = "panel_widget_action_set_enabled")]
    fn action_set_enabled(&self, action_name: &str, enabled: bool);

    #[doc(alias = "panel_widget_close")]
    fn close(&self);

    #[doc(alias = "panel_widget_focus_default")]
    fn focus_default(&self) -> bool;

    #[doc(alias = "panel_widget_force_close")]
    fn force_close(&self);

    #[doc(alias = "panel_widget_get_busy")]
    #[doc(alias = "get_busy")]
    fn is_busy(&self) -> bool;

    #[doc(alias = "panel_widget_get_can_maximize")]
    #[doc(alias = "get_can_maximize")]
    fn can_maximize(&self) -> bool;

    #[doc(alias = "panel_widget_get_child")]
    #[doc(alias = "get_child")]
    fn child(&self) -> Option<gtk::Widget>;

    #[doc(alias = "panel_widget_get_default_focus")]
    #[doc(alias = "get_default_focus")]
    fn default_focus(&self) -> Option<gtk::Widget>;

    #[doc(alias = "panel_widget_get_icon")]
    #[doc(alias = "get_icon")]
    fn icon(&self) -> Option<gio::Icon>;

    #[doc(alias = "panel_widget_get_icon_name")]
    #[doc(alias = "get_icon_name")]
    fn icon_name(&self) -> Option<glib::GString>;

    #[doc(alias = "panel_widget_get_id")]
    #[doc(alias = "get_id")]
    fn id(&self) -> glib::GString;

    #[doc(alias = "panel_widget_get_kind")]
    #[doc(alias = "get_kind")]
    fn kind(&self) -> glib::GString;

    #[doc(alias = "panel_widget_get_menu_model")]
    #[doc(alias = "get_menu_model")]
    fn menu_model(&self) -> Option<gio::MenuModel>;

    #[doc(alias = "panel_widget_get_modified")]
    #[doc(alias = "get_modified")]
    fn is_modified(&self) -> bool;

    #[doc(alias = "panel_widget_get_needs_attention")]
    #[doc(alias = "get_needs_attention")]
    fn needs_attention(&self) -> bool;

    #[doc(alias = "panel_widget_get_position")]
    #[doc(alias = "get_position")]
    fn position(&self) -> Option<Position>;

    #[doc(alias = "panel_widget_get_reorderable")]
    #[doc(alias = "get_reorderable")]
    fn is_reorderable(&self) -> bool;

    #[doc(alias = "panel_widget_get_save_delegate")]
    #[doc(alias = "get_save_delegate")]
    fn save_delegate(&self) -> Option<SaveDelegate>;

    #[doc(alias = "panel_widget_get_title")]
    #[doc(alias = "get_title")]
    fn title(&self) -> Option<glib::GString>;

    #[doc(alias = "panel_widget_get_tooltip")]
    #[doc(alias = "get_tooltip")]
    fn tooltip(&self) -> Option<glib::GString>;

    #[doc(alias = "panel_widget_insert_action_group")]
    fn insert_action_group(&self, prefix: &str, group: &impl IsA<gio::ActionGroup>);

    #[doc(alias = "panel_widget_mark_busy")]
    fn mark_busy(&self);

    #[doc(alias = "panel_widget_maximize")]
    fn maximize(&self);

    #[doc(alias = "panel_widget_raise")]
    fn raise(&self);

    #[doc(alias = "panel_widget_set_can_maximize")]
    fn set_can_maximize(&self, can_maximize: bool);

    #[doc(alias = "panel_widget_set_child")]
    fn set_child(&self, child: Option<&impl IsA<gtk::Widget>>);

    #[doc(alias = "panel_widget_set_icon")]
    fn set_icon(&self, icon: Option<&impl IsA<gio::Icon>>);

    #[doc(alias = "panel_widget_set_icon_name")]
    fn set_icon_name(&self, icon_name: Option<&str>);

    #[doc(alias = "panel_widget_set_id")]
    fn set_id(&self, id: &str);

    #[doc(alias = "panel_widget_set_kind")]
    fn set_kind(&self, kind: Option<&str>);

    #[doc(alias = "panel_widget_set_menu_model")]
    fn set_menu_model(&self, menu_model: Option<&impl IsA<gio::MenuModel>>);

    #[doc(alias = "panel_widget_set_modified")]
    fn set_modified(&self, modified: bool);

    #[doc(alias = "panel_widget_set_needs_attention")]
    fn set_needs_attention(&self, needs_attention: bool);

    #[doc(alias = "panel_widget_set_reorderable")]
    fn set_reorderable(&self, reorderable: bool);

    #[doc(alias = "panel_widget_set_save_delegate")]
    fn set_save_delegate(&self, save_delegate: Option<&impl IsA<SaveDelegate>>);

    #[doc(alias = "panel_widget_set_title")]
    fn set_title(&self, title: Option<&str>);

    #[doc(alias = "panel_widget_set_tooltip")]
    fn set_tooltip(&self, tooltip: Option<&str>);

    #[doc(alias = "panel_widget_unmark_busy")]
    fn unmark_busy(&self);

    #[doc(alias = "panel_widget_unmaximize")]
    fn unmaximize(&self);

    #[doc(alias = "get-default-focus")]
    fn connect_get_default_focus<F: Fn(&Self) -> Option<gtk::Widget> + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[doc(alias = "presented")]
    fn connect_presented<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "busy")]
    fn connect_busy_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "can-maximize")]
    fn connect_can_maximize_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "child")]
    fn connect_child_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "icon")]
    fn connect_icon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "icon-name")]
    fn connect_icon_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "id")]
    fn connect_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "kind")]
    fn connect_kind_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "menu-model")]
    fn connect_menu_model_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "modified")]
    fn connect_modified_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "needs-attention")]
    fn connect_needs_attention_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "reorderable")]
    fn connect_reorderable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "save-delegate")]
    fn connect_save_delegate_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "title")]
    fn connect_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(feature = "v1_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_2")))]
    #[doc(alias = "tooltip")]
    fn connect_tooltip_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Widget>> PanelWidgetExt for O {
    fn action_set_enabled(&self, action_name: &str, enabled: bool) {
        unsafe {
            ffi::panel_widget_action_set_enabled(
                self.as_ref().to_glib_none().0,
                action_name.to_glib_none().0,
                enabled.into_glib(),
            );
        }
    }

    fn close(&self) {
        unsafe {
            ffi::panel_widget_close(self.as_ref().to_glib_none().0);
        }
    }

    fn focus_default(&self) -> bool {
        unsafe {
            from_glib(ffi::panel_widget_focus_default(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn force_close(&self) {
        unsafe {
            ffi::panel_widget_force_close(self.as_ref().to_glib_none().0);
        }
    }

    fn is_busy(&self) -> bool {
        unsafe { from_glib(ffi::panel_widget_get_busy(self.as_ref().to_glib_none().0)) }
    }

    fn can_maximize(&self) -> bool {
        unsafe {
            from_glib(ffi::panel_widget_get_can_maximize(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn child(&self) -> Option<gtk::Widget> {
        unsafe { from_glib_none(ffi::panel_widget_get_child(self.as_ref().to_glib_none().0)) }
    }

    fn default_focus(&self) -> Option<gtk::Widget> {
        unsafe {
            from_glib_none(ffi::panel_widget_get_default_focus(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn icon(&self) -> Option<gio::Icon> {
        unsafe { from_glib_none(ffi::panel_widget_get_icon(self.as_ref().to_glib_none().0)) }
    }

    fn icon_name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::panel_widget_get_icon_name(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn id(&self) -> glib::GString {
        unsafe { from_glib_none(ffi::panel_widget_get_id(self.as_ref().to_glib_none().0)) }
    }

    fn kind(&self) -> glib::GString {
        unsafe { from_glib_none(ffi::panel_widget_get_kind(self.as_ref().to_glib_none().0)) }
    }

    fn menu_model(&self) -> Option<gio::MenuModel> {
        unsafe {
            from_glib_none(ffi::panel_widget_get_menu_model(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn is_modified(&self) -> bool {
        unsafe {
            from_glib(ffi::panel_widget_get_modified(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn needs_attention(&self) -> bool {
        unsafe {
            from_glib(ffi::panel_widget_get_needs_attention(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn position(&self) -> Option<Position> {
        unsafe {
            from_glib_full(ffi::panel_widget_get_position(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn is_reorderable(&self) -> bool {
        unsafe {
            from_glib(ffi::panel_widget_get_reorderable(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn save_delegate(&self) -> Option<SaveDelegate> {
        unsafe {
            from_glib_none(ffi::panel_widget_get_save_delegate(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn title(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::panel_widget_get_title(self.as_ref().to_glib_none().0)) }
    }

    fn tooltip(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::panel_widget_get_tooltip(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn insert_action_group(&self, prefix: &str, group: &impl IsA<gio::ActionGroup>) {
        unsafe {
            ffi::panel_widget_insert_action_group(
                self.as_ref().to_glib_none().0,
                prefix.to_glib_none().0,
                group.as_ref().to_glib_none().0,
            );
        }
    }

    fn mark_busy(&self) {
        unsafe {
            ffi::panel_widget_mark_busy(self.as_ref().to_glib_none().0);
        }
    }

    fn maximize(&self) {
        unsafe {
            ffi::panel_widget_maximize(self.as_ref().to_glib_none().0);
        }
    }

    fn raise(&self) {
        unsafe {
            ffi::panel_widget_raise(self.as_ref().to_glib_none().0);
        }
    }

    fn set_can_maximize(&self, can_maximize: bool) {
        unsafe {
            ffi::panel_widget_set_can_maximize(
                self.as_ref().to_glib_none().0,
                can_maximize.into_glib(),
            );
        }
    }

    fn set_child(&self, child: Option<&impl IsA<gtk::Widget>>) {
        unsafe {
            ffi::panel_widget_set_child(
                self.as_ref().to_glib_none().0,
                child.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    fn set_icon(&self, icon: Option<&impl IsA<gio::Icon>>) {
        unsafe {
            ffi::panel_widget_set_icon(
                self.as_ref().to_glib_none().0,
                icon.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    fn set_icon_name(&self, icon_name: Option<&str>) {
        unsafe {
            ffi::panel_widget_set_icon_name(
                self.as_ref().to_glib_none().0,
                icon_name.to_glib_none().0,
            );
        }
    }

    fn set_id(&self, id: &str) {
        unsafe {
            ffi::panel_widget_set_id(self.as_ref().to_glib_none().0, id.to_glib_none().0);
        }
    }

    fn set_kind(&self, kind: Option<&str>) {
        unsafe {
            ffi::panel_widget_set_kind(self.as_ref().to_glib_none().0, kind.to_glib_none().0);
        }
    }

    fn set_menu_model(&self, menu_model: Option<&impl IsA<gio::MenuModel>>) {
        unsafe {
            ffi::panel_widget_set_menu_model(
                self.as_ref().to_glib_none().0,
                menu_model.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    fn set_modified(&self, modified: bool) {
        unsafe {
            ffi::panel_widget_set_modified(self.as_ref().to_glib_none().0, modified.into_glib());
        }
    }

    fn set_needs_attention(&self, needs_attention: bool) {
        unsafe {
            ffi::panel_widget_set_needs_attention(
                self.as_ref().to_glib_none().0,
                needs_attention.into_glib(),
            );
        }
    }

    fn set_reorderable(&self, reorderable: bool) {
        unsafe {
            ffi::panel_widget_set_reorderable(
                self.as_ref().to_glib_none().0,
                reorderable.into_glib(),
            );
        }
    }

    fn set_save_delegate(&self, save_delegate: Option<&impl IsA<SaveDelegate>>) {
        unsafe {
            ffi::panel_widget_set_save_delegate(
                self.as_ref().to_glib_none().0,
                save_delegate.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    fn set_title(&self, title: Option<&str>) {
        unsafe {
            ffi::panel_widget_set_title(self.as_ref().to_glib_none().0, title.to_glib_none().0);
        }
    }

    fn set_tooltip(&self, tooltip: Option<&str>) {
        unsafe {
            ffi::panel_widget_set_tooltip(self.as_ref().to_glib_none().0, tooltip.to_glib_none().0);
        }
    }

    fn unmark_busy(&self) {
        unsafe {
            ffi::panel_widget_unmark_busy(self.as_ref().to_glib_none().0);
        }
    }

    fn unmaximize(&self) {
        unsafe {
            ffi::panel_widget_unmaximize(self.as_ref().to_glib_none().0);
        }
    }

    fn connect_get_default_focus<F: Fn(&Self) -> Option<gtk::Widget> + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn get_default_focus_trampoline<
            P: IsA<Widget>,
            F: Fn(&P) -> Option<gtk::Widget> + 'static,
        >(
            this: *mut ffi::PanelWidget,
            f: glib::ffi::gpointer,
        ) -> *mut gtk::ffi::GtkWidget {
            let f: &F = &*(f as *const F);
            f(Widget::from_glib_borrow(this).unsafe_cast_ref()) /*Not checked*/
                .to_glib_none()
                .0
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"get-default-focus\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    get_default_focus_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_presented<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn presented_trampoline<P: IsA<Widget>, F: Fn(&P) + 'static>(
            this: *mut ffi::PanelWidget,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"presented\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    presented_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_busy_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_busy_trampoline<P: IsA<Widget>, F: Fn(&P) + 'static>(
            this: *mut ffi::PanelWidget,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::busy\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_busy_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_can_maximize_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_can_maximize_trampoline<P: IsA<Widget>, F: Fn(&P) + 'static>(
            this: *mut ffi::PanelWidget,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::can-maximize\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_can_maximize_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_child_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_child_trampoline<P: IsA<Widget>, F: Fn(&P) + 'static>(
            this: *mut ffi::PanelWidget,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::child\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_child_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_icon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_icon_trampoline<P: IsA<Widget>, F: Fn(&P) + 'static>(
            this: *mut ffi::PanelWidget,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::icon\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_icon_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_icon_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_icon_name_trampoline<P: IsA<Widget>, F: Fn(&P) + 'static>(
            this: *mut ffi::PanelWidget,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::icon-name\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_icon_name_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_id_trampoline<P: IsA<Widget>, F: Fn(&P) + 'static>(
            this: *mut ffi::PanelWidget,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_id_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_kind_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_kind_trampoline<P: IsA<Widget>, F: Fn(&P) + 'static>(
            this: *mut ffi::PanelWidget,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::kind\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_kind_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_menu_model_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_menu_model_trampoline<P: IsA<Widget>, F: Fn(&P) + 'static>(
            this: *mut ffi::PanelWidget,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::menu-model\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_menu_model_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_modified_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_modified_trampoline<P: IsA<Widget>, F: Fn(&P) + 'static>(
            this: *mut ffi::PanelWidget,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::modified\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_modified_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_needs_attention_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_needs_attention_trampoline<
            P: IsA<Widget>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::PanelWidget,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::needs-attention\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_needs_attention_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_reorderable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_reorderable_trampoline<P: IsA<Widget>, F: Fn(&P) + 'static>(
            this: *mut ffi::PanelWidget,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::reorderable\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_reorderable_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_save_delegate_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_save_delegate_trampoline<
            P: IsA<Widget>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::PanelWidget,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::save-delegate\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_save_delegate_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_title_trampoline<P: IsA<Widget>, F: Fn(&P) + 'static>(
            this: *mut ffi::PanelWidget,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::title\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_title_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(feature = "v1_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_2")))]
    fn connect_tooltip_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_tooltip_trampoline<P: IsA<Widget>, F: Fn(&P) + 'static>(
            this: *mut ffi::PanelWidget,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::tooltip\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_tooltip_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for Widget {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Widget")
    }
}
