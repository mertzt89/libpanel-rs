// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files
// DO NOT EDIT

use crate::SaveDelegate;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "PanelWidget")]
    pub struct Widget(Object<ffi::PanelWidget, ffi::PanelWidgetClass>) @extends gtk::Widget, @implements gtk::Accessible, gtk::Buildable, gtk::ConstraintTarget;

    match fn {
        type_ => || ffi::panel_widget_get_type(),
    }
}

impl Widget {
    #[doc(alias = "panel_widget_new")]
    pub fn new() -> Widget {
        assert_initialized_main_thread!();
        unsafe { gtk::Widget::from_glib_full(ffi::panel_widget_new()).unsafe_cast() }
    }
}

impl Default for Widget {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_WIDGET: Option<&Widget> = None;

pub trait WidgetExt: 'static {
    #[doc(alias = "panel_widget_focus_default")]
    fn focus_default(&self) -> bool;

    #[doc(alias = "panel_widget_get_background_rgba")]
    #[doc(alias = "get_background_rgba")]
    fn background_rgba(&self) -> Option<gdk::RGBA>;

    #[doc(alias = "panel_widget_get_busy")]
    #[doc(alias = "get_busy")]
    fn is_busy(&self) -> bool;

    #[doc(alias = "panel_widget_get_can_maximize")]
    #[doc(alias = "get_can_maximize")]
    fn can_maximize(&self) -> bool;

    #[doc(alias = "panel_widget_get_child")]
    #[doc(alias = "get_child")]
    fn child(&self) -> Option<gtk::Widget>;

    #[doc(alias = "panel_widget_get_default_focus")]
    #[doc(alias = "get_default_focus")]
    fn default_focus(&self) -> Option<gtk::Widget>;

    #[doc(alias = "panel_widget_get_foreground_rgba")]
    #[doc(alias = "get_foreground_rgba")]
    fn foreground_rgba(&self) -> Option<gdk::RGBA>;

    #[doc(alias = "panel_widget_get_icon")]
    #[doc(alias = "get_icon")]
    fn icon(&self) -> Option<gio::Icon>;

    #[doc(alias = "panel_widget_get_icon_name")]
    #[doc(alias = "get_icon_name")]
    fn icon_name(&self) -> Option<glib::GString>;

    #[doc(alias = "panel_widget_get_kind")]
    #[doc(alias = "get_kind")]
    fn kind(&self) -> glib::GString;

    #[doc(alias = "panel_widget_get_menu_model")]
    #[doc(alias = "get_menu_model")]
    fn menu_model(&self) -> Option<gio::MenuModel>;

    #[doc(alias = "panel_widget_get_modified")]
    #[doc(alias = "get_modified")]
    fn is_modified(&self) -> bool;

    #[doc(alias = "panel_widget_get_needs_attention")]
    #[doc(alias = "get_needs_attention")]
    fn needs_attention(&self) -> bool;

    #[doc(alias = "panel_widget_get_reorderable")]
    #[doc(alias = "get_reorderable")]
    fn is_reorderable(&self) -> bool;

    #[doc(alias = "panel_widget_get_save_delegate")]
    #[doc(alias = "get_save_delegate")]
    fn save_delegate(&self) -> Option<SaveDelegate>;

    #[doc(alias = "panel_widget_get_title")]
    #[doc(alias = "get_title")]
    fn title(&self) -> Option<glib::GString>;

    #[doc(alias = "panel_widget_mark_busy")]
    fn mark_busy(&self);

    #[doc(alias = "panel_widget_maximize")]
    fn maximize(&self);

    #[doc(alias = "panel_widget_raise")]
    fn raise(&self);

    #[doc(alias = "panel_widget_set_background_rgba")]
    fn set_background_rgba(&self, background_rgba: Option<&gdk::RGBA>);

    #[doc(alias = "panel_widget_set_can_maximize")]
    fn set_can_maximize(&self, can_maximize: bool);

    #[doc(alias = "panel_widget_set_child")]
    fn set_child(&self, child: Option<&impl IsA<gtk::Widget>>);

    #[doc(alias = "panel_widget_set_foreground_rgba")]
    fn set_foreground_rgba(&self, foreground_rgba: Option<&gdk::RGBA>);

    #[doc(alias = "panel_widget_set_icon")]
    fn set_icon(&self, icon: Option<&impl IsA<gio::Icon>>);

    #[doc(alias = "panel_widget_set_icon_name")]
    fn set_icon_name(&self, icon_name: Option<&str>);

    #[doc(alias = "panel_widget_set_kind")]
    fn set_kind(&self, kind: Option<&str>);

    #[doc(alias = "panel_widget_set_menu_model")]
    fn set_menu_model(&self, menu_model: Option<&impl IsA<gio::MenuModel>>);

    #[doc(alias = "panel_widget_set_modified")]
    fn set_modified(&self, modified: bool);

    #[doc(alias = "panel_widget_set_needs_attention")]
    fn set_needs_attention(&self, needs_attention: bool);

    #[doc(alias = "panel_widget_set_reorderable")]
    fn set_reorderable(&self, reorderable: bool);

    #[doc(alias = "panel_widget_set_save_delegate")]
    fn set_save_delegate(&self, save_delegate: Option<&impl IsA<SaveDelegate>>);

    #[doc(alias = "panel_widget_set_title")]
    fn set_title(&self, title: Option<&str>);

    #[doc(alias = "panel_widget_unmark_busy")]
    fn unmark_busy(&self);

    #[doc(alias = "panel_widget_unmaximize")]
    fn unmaximize(&self);

    #[doc(alias = "get-default-focus")]
    fn connect_get_default_focus<F: Fn(&Self) -> Option<gtk::Widget> + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[doc(alias = "background-rgba")]
    fn connect_background_rgba_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "busy")]
    fn connect_busy_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "can-maximize")]
    fn connect_can_maximize_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "child")]
    fn connect_child_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "foreground-rgba")]
    fn connect_foreground_rgba_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "icon")]
    fn connect_icon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "icon-name")]
    fn connect_icon_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "kind")]
    fn connect_kind_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "menu-model")]
    fn connect_menu_model_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "modified")]
    fn connect_modified_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "needs-attention")]
    fn connect_needs_attention_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "reorderable")]
    fn connect_reorderable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "save-delegate")]
    fn connect_save_delegate_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "title")]
    fn connect_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Widget>> WidgetExt for O {
    fn focus_default(&self) -> bool {
        unsafe {
            from_glib(ffi::panel_widget_focus_default(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn background_rgba(&self) -> Option<gdk::RGBA> {
        unsafe {
            from_glib_none(ffi::panel_widget_get_background_rgba(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn is_busy(&self) -> bool {
        unsafe { from_glib(ffi::panel_widget_get_busy(self.as_ref().to_glib_none().0)) }
    }

    fn can_maximize(&self) -> bool {
        unsafe {
            from_glib(ffi::panel_widget_get_can_maximize(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn child(&self) -> Option<gtk::Widget> {
        unsafe { from_glib_none(ffi::panel_widget_get_child(self.as_ref().to_glib_none().0)) }
    }

    fn default_focus(&self) -> Option<gtk::Widget> {
        unsafe {
            from_glib_none(ffi::panel_widget_get_default_focus(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn foreground_rgba(&self) -> Option<gdk::RGBA> {
        unsafe {
            from_glib_none(ffi::panel_widget_get_foreground_rgba(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn icon(&self) -> Option<gio::Icon> {
        unsafe { from_glib_none(ffi::panel_widget_get_icon(self.as_ref().to_glib_none().0)) }
    }

    fn icon_name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::panel_widget_get_icon_name(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn kind(&self) -> glib::GString {
        unsafe { from_glib_none(ffi::panel_widget_get_kind(self.as_ref().to_glib_none().0)) }
    }

    fn menu_model(&self) -> Option<gio::MenuModel> {
        unsafe {
            from_glib_none(ffi::panel_widget_get_menu_model(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn is_modified(&self) -> bool {
        unsafe {
            from_glib(ffi::panel_widget_get_modified(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn needs_attention(&self) -> bool {
        unsafe {
            from_glib(ffi::panel_widget_get_needs_attention(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn is_reorderable(&self) -> bool {
        unsafe {
            from_glib(ffi::panel_widget_get_reorderable(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn save_delegate(&self) -> Option<SaveDelegate> {
        unsafe {
            from_glib_none(ffi::panel_widget_get_save_delegate(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn title(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::panel_widget_get_title(self.as_ref().to_glib_none().0)) }
    }

    fn mark_busy(&self) {
        unsafe {
            ffi::panel_widget_mark_busy(self.as_ref().to_glib_none().0);
        }
    }

    fn maximize(&self) {
        unsafe {
            ffi::panel_widget_maximize(self.as_ref().to_glib_none().0);
        }
    }

    fn raise(&self) {
        unsafe {
            ffi::panel_widget_raise(self.as_ref().to_glib_none().0);
        }
    }

    fn set_background_rgba(&self, background_rgba: Option<&gdk::RGBA>) {
        unsafe {
            ffi::panel_widget_set_background_rgba(
                self.as_ref().to_glib_none().0,
                background_rgba.to_glib_none().0,
            );
        }
    }

    fn set_can_maximize(&self, can_maximize: bool) {
        unsafe {
            ffi::panel_widget_set_can_maximize(
                self.as_ref().to_glib_none().0,
                can_maximize.into_glib(),
            );
        }
    }

    fn set_child(&self, child: Option<&impl IsA<gtk::Widget>>) {
        unsafe {
            ffi::panel_widget_set_child(
                self.as_ref().to_glib_none().0,
                child.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    fn set_foreground_rgba(&self, foreground_rgba: Option<&gdk::RGBA>) {
        unsafe {
            ffi::panel_widget_set_foreground_rgba(
                self.as_ref().to_glib_none().0,
                foreground_rgba.to_glib_none().0,
            );
        }
    }

    fn set_icon(&self, icon: Option<&impl IsA<gio::Icon>>) {
        unsafe {
            ffi::panel_widget_set_icon(
                self.as_ref().to_glib_none().0,
                icon.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    fn set_icon_name(&self, icon_name: Option<&str>) {
        unsafe {
            ffi::panel_widget_set_icon_name(
                self.as_ref().to_glib_none().0,
                icon_name.to_glib_none().0,
            );
        }
    }

    fn set_kind(&self, kind: Option<&str>) {
        unsafe {
            ffi::panel_widget_set_kind(self.as_ref().to_glib_none().0, kind.to_glib_none().0);
        }
    }

    fn set_menu_model(&self, menu_model: Option<&impl IsA<gio::MenuModel>>) {
        unsafe {
            ffi::panel_widget_set_menu_model(
                self.as_ref().to_glib_none().0,
                menu_model.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    fn set_modified(&self, modified: bool) {
        unsafe {
            ffi::panel_widget_set_modified(self.as_ref().to_glib_none().0, modified.into_glib());
        }
    }

    fn set_needs_attention(&self, needs_attention: bool) {
        unsafe {
            ffi::panel_widget_set_needs_attention(
                self.as_ref().to_glib_none().0,
                needs_attention.into_glib(),
            );
        }
    }

    fn set_reorderable(&self, reorderable: bool) {
        unsafe {
            ffi::panel_widget_set_reorderable(
                self.as_ref().to_glib_none().0,
                reorderable.into_glib(),
            );
        }
    }

    fn set_save_delegate(&self, save_delegate: Option<&impl IsA<SaveDelegate>>) {
        unsafe {
            ffi::panel_widget_set_save_delegate(
                self.as_ref().to_glib_none().0,
                save_delegate.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    fn set_title(&self, title: Option<&str>) {
        unsafe {
            ffi::panel_widget_set_title(self.as_ref().to_glib_none().0, title.to_glib_none().0);
        }
    }

    fn unmark_busy(&self) {
        unsafe {
            ffi::panel_widget_unmark_busy(self.as_ref().to_glib_none().0);
        }
    }

    fn unmaximize(&self) {
        unsafe {
            ffi::panel_widget_unmaximize(self.as_ref().to_glib_none().0);
        }
    }

    fn connect_get_default_focus<F: Fn(&Self) -> Option<gtk::Widget> + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn get_default_focus_trampoline<
            P: IsA<Widget>,
            F: Fn(&P) -> Option<gtk::Widget> + 'static,
        >(
            this: *mut ffi::PanelWidget,
            f: glib::ffi::gpointer,
        ) -> *mut gtk::ffi::GtkWidget {
            let f: &F = &*(f as *const F);
            f(Widget::from_glib_borrow(this).unsafe_cast_ref()) /*Not checked*/
                .to_glib_none()
                .0
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"get-default-focus\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    get_default_focus_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_background_rgba_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_background_rgba_trampoline<
            P: IsA<Widget>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::PanelWidget,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::background-rgba\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_background_rgba_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_busy_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_busy_trampoline<P: IsA<Widget>, F: Fn(&P) + 'static>(
            this: *mut ffi::PanelWidget,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::busy\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_busy_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_can_maximize_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_can_maximize_trampoline<P: IsA<Widget>, F: Fn(&P) + 'static>(
            this: *mut ffi::PanelWidget,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::can-maximize\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_can_maximize_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_child_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_child_trampoline<P: IsA<Widget>, F: Fn(&P) + 'static>(
            this: *mut ffi::PanelWidget,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::child\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_child_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_foreground_rgba_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_foreground_rgba_trampoline<
            P: IsA<Widget>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::PanelWidget,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::foreground-rgba\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_foreground_rgba_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_icon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_icon_trampoline<P: IsA<Widget>, F: Fn(&P) + 'static>(
            this: *mut ffi::PanelWidget,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::icon\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_icon_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_icon_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_icon_name_trampoline<P: IsA<Widget>, F: Fn(&P) + 'static>(
            this: *mut ffi::PanelWidget,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::icon-name\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_icon_name_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_kind_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_kind_trampoline<P: IsA<Widget>, F: Fn(&P) + 'static>(
            this: *mut ffi::PanelWidget,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::kind\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_kind_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_menu_model_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_menu_model_trampoline<P: IsA<Widget>, F: Fn(&P) + 'static>(
            this: *mut ffi::PanelWidget,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::menu-model\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_menu_model_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_modified_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_modified_trampoline<P: IsA<Widget>, F: Fn(&P) + 'static>(
            this: *mut ffi::PanelWidget,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::modified\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_modified_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_needs_attention_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_needs_attention_trampoline<
            P: IsA<Widget>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::PanelWidget,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::needs-attention\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_needs_attention_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_reorderable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_reorderable_trampoline<P: IsA<Widget>, F: Fn(&P) + 'static>(
            this: *mut ffi::PanelWidget,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::reorderable\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_reorderable_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_save_delegate_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_save_delegate_trampoline<
            P: IsA<Widget>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::PanelWidget,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::save-delegate\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_save_delegate_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_title_trampoline<P: IsA<Widget>, F: Fn(&P) + 'static>(
            this: *mut ffi::PanelWidget,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::title\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_title_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for Widget {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Widget")
    }
}
