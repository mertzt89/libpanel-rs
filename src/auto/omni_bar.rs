// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use crate::ffi;
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::boxed::Box as Box_;

glib::wrapper! {
    #[doc(alias = "PanelOmniBar")]
    pub struct OmniBar(Object<ffi::PanelOmniBar, ffi::PanelOmniBarClass>) @extends gtk::Widget, @implements gtk::Accessible, gtk::Buildable, gtk::ConstraintTarget;

    match fn {
        type_ => || ffi::panel_omni_bar_get_type(),
    }
}

impl OmniBar {
    pub const NONE: Option<&'static OmniBar> = None;

    #[doc(alias = "panel_omni_bar_new")]
    pub fn new() -> OmniBar {
        assert_initialized_main_thread!();
        unsafe { gtk::Widget::from_glib_none(ffi::panel_omni_bar_new()).unsafe_cast() }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`OmniBar`] objects.
    ///
    /// This method returns an instance of [`OmniBarBuilder`](crate::builders::OmniBarBuilder) which can be used to create [`OmniBar`] objects.
    pub fn builder() -> OmniBarBuilder {
        OmniBarBuilder::new()
    }
}

impl Default for OmniBar {
    fn default() -> Self {
        Self::new()
    }
}

// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`OmniBar`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct OmniBarBuilder {
    builder: glib::object::ObjectBuilder<'static, OmniBar>,
}

impl OmniBarBuilder {
    fn new() -> Self {
        Self {
            builder: glib::object::Object::builder(),
        }
    }

    pub fn action_tooltip(self, action_tooltip: impl Into<glib::GString>) -> Self {
        Self {
            builder: self
                .builder
                .property("action-tooltip", action_tooltip.into()),
        }
    }

    pub fn icon_name(self, icon_name: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("icon-name", icon_name.into()),
        }
    }

    pub fn menu_model(self, menu_model: &impl IsA<gio::MenuModel>) -> Self {
        Self {
            builder: self
                .builder
                .property("menu-model", menu_model.clone().upcast()),
        }
    }

    pub fn popover(self, popover: &impl IsA<gtk::Popover>) -> Self {
        Self {
            builder: self.builder.property("popover", popover.clone().upcast()),
        }
    }

    pub fn progress(self, progress: f64) -> Self {
        Self {
            builder: self.builder.property("progress", progress),
        }
    }

    pub fn can_focus(self, can_focus: bool) -> Self {
        Self {
            builder: self.builder.property("can-focus", can_focus),
        }
    }

    pub fn can_target(self, can_target: bool) -> Self {
        Self {
            builder: self.builder.property("can-target", can_target),
        }
    }

    pub fn css_classes(self, css_classes: impl Into<glib::StrV>) -> Self {
        Self {
            builder: self.builder.property("css-classes", css_classes.into()),
        }
    }

    pub fn css_name(self, css_name: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("css-name", css_name.into()),
        }
    }

    pub fn cursor(self, cursor: &gdk::Cursor) -> Self {
        Self {
            builder: self.builder.property("cursor", cursor.clone()),
        }
    }

    pub fn focus_on_click(self, focus_on_click: bool) -> Self {
        Self {
            builder: self.builder.property("focus-on-click", focus_on_click),
        }
    }

    pub fn focusable(self, focusable: bool) -> Self {
        Self {
            builder: self.builder.property("focusable", focusable),
        }
    }

    pub fn halign(self, halign: gtk::Align) -> Self {
        Self {
            builder: self.builder.property("halign", halign),
        }
    }

    pub fn has_tooltip(self, has_tooltip: bool) -> Self {
        Self {
            builder: self.builder.property("has-tooltip", has_tooltip),
        }
    }

    pub fn height_request(self, height_request: i32) -> Self {
        Self {
            builder: self.builder.property("height-request", height_request),
        }
    }

    pub fn hexpand(self, hexpand: bool) -> Self {
        Self {
            builder: self.builder.property("hexpand", hexpand),
        }
    }

    pub fn hexpand_set(self, hexpand_set: bool) -> Self {
        Self {
            builder: self.builder.property("hexpand-set", hexpand_set),
        }
    }

    pub fn layout_manager(self, layout_manager: &impl IsA<gtk::LayoutManager>) -> Self {
        Self {
            builder: self
                .builder
                .property("layout-manager", layout_manager.clone().upcast()),
        }
    }

    pub fn margin_bottom(self, margin_bottom: i32) -> Self {
        Self {
            builder: self.builder.property("margin-bottom", margin_bottom),
        }
    }

    pub fn margin_end(self, margin_end: i32) -> Self {
        Self {
            builder: self.builder.property("margin-end", margin_end),
        }
    }

    pub fn margin_start(self, margin_start: i32) -> Self {
        Self {
            builder: self.builder.property("margin-start", margin_start),
        }
    }

    pub fn margin_top(self, margin_top: i32) -> Self {
        Self {
            builder: self.builder.property("margin-top", margin_top),
        }
    }

    pub fn name(self, name: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("name", name.into()),
        }
    }

    pub fn opacity(self, opacity: f64) -> Self {
        Self {
            builder: self.builder.property("opacity", opacity),
        }
    }

    pub fn overflow(self, overflow: gtk::Overflow) -> Self {
        Self {
            builder: self.builder.property("overflow", overflow),
        }
    }

    pub fn receives_default(self, receives_default: bool) -> Self {
        Self {
            builder: self.builder.property("receives-default", receives_default),
        }
    }

    pub fn sensitive(self, sensitive: bool) -> Self {
        Self {
            builder: self.builder.property("sensitive", sensitive),
        }
    }

    pub fn tooltip_markup(self, tooltip_markup: impl Into<glib::GString>) -> Self {
        Self {
            builder: self
                .builder
                .property("tooltip-markup", tooltip_markup.into()),
        }
    }

    pub fn tooltip_text(self, tooltip_text: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("tooltip-text", tooltip_text.into()),
        }
    }

    pub fn valign(self, valign: gtk::Align) -> Self {
        Self {
            builder: self.builder.property("valign", valign),
        }
    }

    pub fn vexpand(self, vexpand: bool) -> Self {
        Self {
            builder: self.builder.property("vexpand", vexpand),
        }
    }

    pub fn vexpand_set(self, vexpand_set: bool) -> Self {
        Self {
            builder: self.builder.property("vexpand-set", vexpand_set),
        }
    }

    pub fn visible(self, visible: bool) -> Self {
        Self {
            builder: self.builder.property("visible", visible),
        }
    }

    pub fn width_request(self, width_request: i32) -> Self {
        Self {
            builder: self.builder.property("width-request", width_request),
        }
    }

    pub fn accessible_role(self, accessible_role: gtk::AccessibleRole) -> Self {
        Self {
            builder: self.builder.property("accessible-role", accessible_role),
        }
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`OmniBar`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> OmniBar {
        self.builder.build()
    }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::OmniBar>> Sealed for T {}
}

pub trait OmniBarExt: IsA<OmniBar> + sealed::Sealed + 'static {
    #[doc(alias = "panel_omni_bar_add_prefix")]
    fn add_prefix(&self, priority: i32, widget: &impl IsA<gtk::Widget>) {
        unsafe {
            ffi::panel_omni_bar_add_prefix(
                self.as_ref().to_glib_none().0,
                priority,
                widget.as_ref().to_glib_none().0,
            );
        }
    }

    #[doc(alias = "panel_omni_bar_add_suffix")]
    fn add_suffix(&self, priority: i32, widget: &impl IsA<gtk::Widget>) {
        unsafe {
            ffi::panel_omni_bar_add_suffix(
                self.as_ref().to_glib_none().0,
                priority,
                widget.as_ref().to_glib_none().0,
            );
        }
    }

    #[doc(alias = "panel_omni_bar_get_popover")]
    #[doc(alias = "get_popover")]
    fn popover(&self) -> Option<gtk::Popover> {
        unsafe {
            from_glib_none(ffi::panel_omni_bar_get_popover(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "panel_omni_bar_get_progress")]
    #[doc(alias = "get_progress")]
    fn progress(&self) -> f64 {
        unsafe { ffi::panel_omni_bar_get_progress(self.as_ref().to_glib_none().0) }
    }

    #[doc(alias = "panel_omni_bar_remove")]
    fn remove(&self, widget: &impl IsA<gtk::Widget>) {
        unsafe {
            ffi::panel_omni_bar_remove(
                self.as_ref().to_glib_none().0,
                widget.as_ref().to_glib_none().0,
            );
        }
    }

    #[doc(alias = "panel_omni_bar_set_popover")]
    #[doc(alias = "popover")]
    fn set_popover(&self, popover: Option<&impl IsA<gtk::Popover>>) {
        unsafe {
            ffi::panel_omni_bar_set_popover(
                self.as_ref().to_glib_none().0,
                popover.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    #[doc(alias = "panel_omni_bar_set_progress")]
    #[doc(alias = "progress")]
    fn set_progress(&self, progress: f64) {
        unsafe {
            ffi::panel_omni_bar_set_progress(self.as_ref().to_glib_none().0, progress);
        }
    }

    #[doc(alias = "panel_omni_bar_start_pulsing")]
    fn start_pulsing(&self) {
        unsafe {
            ffi::panel_omni_bar_start_pulsing(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "panel_omni_bar_stop_pulsing")]
    fn stop_pulsing(&self) {
        unsafe {
            ffi::panel_omni_bar_stop_pulsing(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "action-tooltip")]
    fn action_tooltip(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "action-tooltip")
    }

    #[doc(alias = "action-tooltip")]
    fn set_action_tooltip(&self, action_tooltip: Option<&str>) {
        ObjectExt::set_property(self.as_ref(), "action-tooltip", action_tooltip)
    }

    #[doc(alias = "icon-name")]
    fn icon_name(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "icon-name")
    }

    #[doc(alias = "icon-name")]
    fn set_icon_name(&self, icon_name: Option<&str>) {
        ObjectExt::set_property(self.as_ref(), "icon-name", icon_name)
    }

    #[doc(alias = "menu-model")]
    fn menu_model(&self) -> Option<gio::MenuModel> {
        ObjectExt::property(self.as_ref(), "menu-model")
    }

    #[doc(alias = "menu-model")]
    fn set_menu_model<P: IsA<gio::MenuModel>>(&self, menu_model: Option<&P>) {
        ObjectExt::set_property(self.as_ref(), "menu-model", menu_model)
    }

    #[doc(alias = "action-tooltip")]
    fn connect_action_tooltip_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_action_tooltip_trampoline<
            P: IsA<OmniBar>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::PanelOmniBar,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(OmniBar::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::action-tooltip\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_action_tooltip_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "icon-name")]
    fn connect_icon_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_icon_name_trampoline<P: IsA<OmniBar>, F: Fn(&P) + 'static>(
            this: *mut ffi::PanelOmniBar,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(OmniBar::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::icon-name\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_icon_name_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "menu-model")]
    fn connect_menu_model_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_menu_model_trampoline<P: IsA<OmniBar>, F: Fn(&P) + 'static>(
            this: *mut ffi::PanelOmniBar,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(OmniBar::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::menu-model\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_menu_model_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "popover")]
    fn connect_popover_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_popover_trampoline<P: IsA<OmniBar>, F: Fn(&P) + 'static>(
            this: *mut ffi::PanelOmniBar,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(OmniBar::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::popover\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_popover_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "progress")]
    fn connect_progress_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_progress_trampoline<P: IsA<OmniBar>, F: Fn(&P) + 'static>(
            this: *mut ffi::PanelOmniBar,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(OmniBar::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::progress\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_progress_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<OmniBar>> OmniBarExt for O {}
