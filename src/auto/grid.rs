// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files
// DO NOT EDIT

use crate::Frame;
use crate::GridColumn;
use crate::Widget;
use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "PanelGrid")]
    pub struct Grid(Object<ffi::PanelGrid, ffi::PanelGridClass>) @extends gtk::Widget, @implements gtk::Accessible, gtk::Buildable, gtk::ConstraintTarget;

    match fn {
        type_ => || ffi::panel_grid_get_type(),
    }
}

impl Grid {
    #[doc(alias = "panel_grid_new")]
    pub fn new() -> Grid {
        assert_initialized_main_thread!();
        unsafe { gtk::Widget::from_glib_full(ffi::panel_grid_new()).unsafe_cast() }
    }

    #[doc(alias = "panel_grid_add")]
    pub fn add(&self, widget: &impl IsA<Widget>) {
        unsafe {
            ffi::panel_grid_add(self.to_glib_none().0, widget.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "panel_grid_get_column")]
    #[doc(alias = "get_column")]
    pub fn column(&self, column: u32) -> GridColumn {
        unsafe { from_glib_none(ffi::panel_grid_get_column(self.to_glib_none().0, column)) }
    }

    #[doc(alias = "panel_grid_get_most_recent_column")]
    #[doc(alias = "get_most_recent_column")]
    pub fn most_recent_column(&self) -> GridColumn {
        unsafe {
            from_glib_none(ffi::panel_grid_get_most_recent_column(
                self.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "panel_grid_get_most_recent_frame")]
    #[doc(alias = "get_most_recent_frame")]
    pub fn most_recent_frame(&self) -> Frame {
        unsafe { from_glib_none(ffi::panel_grid_get_most_recent_frame(self.to_glib_none().0)) }
    }

    #[doc(alias = "panel_grid_get_n_columns")]
    #[doc(alias = "get_n_columns")]
    pub fn n_columns(&self) -> u32 {
        unsafe { ffi::panel_grid_get_n_columns(self.to_glib_none().0) }
    }

    #[doc(alias = "create-frame")]
    pub fn connect_create_frame<F: Fn(&Self) -> Frame + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn create_frame_trampoline<F: Fn(&Grid) -> Frame + 'static>(
            this: *mut ffi::PanelGrid,
            f: glib::ffi::gpointer,
        ) -> *mut ffi::PanelFrame {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this)).to_glib_full()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"create-frame\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    create_frame_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl Default for Grid {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for Grid {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Grid")
    }
}
