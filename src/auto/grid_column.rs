// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files
// DO NOT EDIT

use crate::Frame;
use glib::object::Cast;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "PanelGridColumn")]
    pub struct GridColumn(Object<ffi::PanelGridColumn, ffi::PanelGridColumnClass>) @extends gtk::Widget, @implements gtk::Accessible, gtk::Buildable, gtk::ConstraintTarget;

    match fn {
        type_ => || ffi::panel_grid_column_get_type(),
    }
}

impl GridColumn {
    #[doc(alias = "panel_grid_column_new")]
    pub fn new() -> GridColumn {
        assert_initialized_main_thread!();
        unsafe { gtk::Widget::from_glib_none(ffi::panel_grid_column_new()).unsafe_cast() }
    }

    #[doc(alias = "panel_grid_column_foreach_frame")]
    pub fn foreach_frame<P: FnMut(&Frame)>(&self, callback: P) {
        let callback_data: P = callback;
        unsafe extern "C" fn callback_func<P: FnMut(&Frame)>(
            frame: *mut ffi::PanelFrame,
            user_data: glib::ffi::gpointer,
        ) {
            let frame = from_glib_borrow(frame);
            let callback: *mut P = user_data as *const _ as usize as *mut P;
            (*callback)(&frame);
        }
        let callback = Some(callback_func::<P> as _);
        let super_callback0: &P = &callback_data;
        unsafe {
            ffi::panel_grid_column_foreach_frame(
                self.to_glib_none().0,
                callback,
                super_callback0 as *const _ as usize as *mut _,
            );
        }
    }

    #[doc(alias = "panel_grid_column_get_empty")]
    #[doc(alias = "get_empty")]
    pub fn is_empty(&self) -> bool {
        unsafe { from_glib(ffi::panel_grid_column_get_empty(self.to_glib_none().0)) }
    }

    #[doc(alias = "panel_grid_column_get_most_recent_frame")]
    #[doc(alias = "get_most_recent_frame")]
    pub fn most_recent_frame(&self) -> Frame {
        unsafe {
            from_glib_none(ffi::panel_grid_column_get_most_recent_frame(
                self.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "panel_grid_column_get_n_rows")]
    #[doc(alias = "get_n_rows")]
    pub fn n_rows(&self) -> u32 {
        unsafe { ffi::panel_grid_column_get_n_rows(self.to_glib_none().0) }
    }

    #[doc(alias = "panel_grid_column_get_row")]
    #[doc(alias = "get_row")]
    pub fn row(&self, row: u32) -> Frame {
        unsafe { from_glib_none(ffi::panel_grid_column_get_row(self.to_glib_none().0, row)) }
    }
}

impl Default for GridColumn {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for GridColumn {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("GridColumn")
    }
}
