// Generated by gir (https://github.com/gtk-rs/gir @ d7c0763cacbc)
// from
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 4d1189172a70)
// DO NOT EDIT

#![cfg(unix)]

use libpanel_sys::*;
use std::env;
use std::error::Error;
use std::ffi::OsString;
use std::mem::{align_of, size_of};
use std::path::Path;
use std::process::{Command, Stdio};
use std::str;
use tempfile::Builder;

static PACKAGES: &[&str] = &["libpanel-1"];

#[derive(Clone, Debug)]
struct Compiler {
    pub args: Vec<String>,
}

impl Compiler {
    pub fn new() -> Result<Self, Box<dyn Error>> {
        let mut args = get_var("CC", "cc")?;
        args.push("-Wno-deprecated-declarations".to_owned());
        // For _Generic
        args.push("-std=c11".to_owned());
        // For %z support in printf when using MinGW.
        args.push("-D__USE_MINGW_ANSI_STDIO".to_owned());
        args.extend(get_var("CFLAGS", "")?);
        args.extend(get_var("CPPFLAGS", "")?);
        args.extend(pkg_config_cflags(PACKAGES)?);
        Ok(Self { args })
    }

    pub fn compile(&self, src: &Path, out: &Path) -> Result<(), Box<dyn Error>> {
        let mut cmd = self.to_command();
        cmd.arg(src);
        cmd.arg("-o");
        cmd.arg(out);
        let status = cmd.spawn()?.wait()?;
        if !status.success() {
            return Err(format!("compilation command {cmd:?} failed, {status}").into());
        }
        Ok(())
    }

    fn to_command(&self) -> Command {
        let mut cmd = Command::new(&self.args[0]);
        cmd.args(&self.args[1..]);
        cmd
    }
}

fn get_var(name: &str, default: &str) -> Result<Vec<String>, Box<dyn Error>> {
    match env::var(name) {
        Ok(value) => Ok(shell_words::split(&value)?),
        Err(env::VarError::NotPresent) => Ok(shell_words::split(default)?),
        Err(err) => Err(format!("{name} {err}").into()),
    }
}

fn pkg_config_cflags(packages: &[&str]) -> Result<Vec<String>, Box<dyn Error>> {
    if packages.is_empty() {
        return Ok(Vec::new());
    }
    let pkg_config = env::var_os("PKG_CONFIG").unwrap_or_else(|| OsString::from("pkg-config"));
    let mut cmd = Command::new(pkg_config);
    cmd.arg("--cflags");
    cmd.args(packages);
    cmd.stderr(Stdio::inherit());
    let out = cmd.output()?;
    if !out.status.success() {
        let (status, stdout) = (out.status, String::from_utf8_lossy(&out.stdout));
        return Err(format!("command {cmd:?} failed, {status:?}\nstdout: {stdout}").into());
    }
    let stdout = str::from_utf8(&out.stdout)?;
    Ok(shell_words::split(stdout.trim())?)
}

#[derive(Copy, Clone, Debug, Eq, PartialEq)]
struct Layout {
    size: usize,
    alignment: usize,
}

#[derive(Copy, Clone, Debug, Default, Eq, PartialEq)]
struct Results {
    /// Number of successfully completed tests.
    passed: usize,
    /// Total number of failed tests (including those that failed to compile).
    failed: usize,
}

impl Results {
    fn record_passed(&mut self) {
        self.passed += 1;
    }
    fn record_failed(&mut self) {
        self.failed += 1;
    }
    fn summary(&self) -> String {
        format!("{} passed; {} failed", self.passed, self.failed)
    }
    fn expect_total_success(&self) {
        if self.failed == 0 {
            println!("OK: {}", self.summary());
        } else {
            panic!("FAILED: {}", self.summary());
        };
    }
}

#[test]
fn cross_validate_constants_with_c() {
    let mut c_constants: Vec<(String, String)> = Vec::new();

    for l in get_c_output("constant").unwrap().lines() {
        let (name, value) = l.split_once(';').expect("Missing ';' separator");
        c_constants.push((name.to_owned(), value.to_owned()));
    }

    let mut results = Results::default();

    for ((rust_name, rust_value), (c_name, c_value)) in
        RUST_CONSTANTS.iter().zip(c_constants.iter())
    {
        if rust_name != c_name {
            results.record_failed();
            eprintln!("Name mismatch:\nRust: {rust_name:?}\nC:    {c_name:?}");
            continue;
        }

        if rust_value != c_value {
            results.record_failed();
            eprintln!(
                "Constant value mismatch for {rust_name}\nRust: {rust_value:?}\nC:    {c_value:?}",
            );
            continue;
        }

        results.record_passed();
    }

    results.expect_total_success();
}

#[test]
fn cross_validate_layout_with_c() {
    let mut c_layouts = Vec::new();

    for l in get_c_output("layout").unwrap().lines() {
        let (name, value) = l.split_once(';').expect("Missing first ';' separator");
        let (size, alignment) = value.split_once(';').expect("Missing second ';' separator");
        let size = size.parse().expect("Failed to parse size");
        let alignment = alignment.parse().expect("Failed to parse alignment");
        c_layouts.push((name.to_owned(), Layout { size, alignment }));
    }

    let mut results = Results::default();

    for ((rust_name, rust_layout), (c_name, c_layout)) in RUST_LAYOUTS.iter().zip(c_layouts.iter())
    {
        if rust_name != c_name {
            results.record_failed();
            eprintln!("Name mismatch:\nRust: {rust_name:?}\nC:    {c_name:?}");
            continue;
        }

        if rust_layout != c_layout {
            results.record_failed();
            eprintln!("Layout mismatch for {rust_name}\nRust: {rust_layout:?}\nC:    {c_layout:?}",);
            continue;
        }

        results.record_passed();
    }

    results.expect_total_success();
}

fn get_c_output(name: &str) -> Result<String, Box<dyn Error>> {
    let tmpdir = Builder::new().prefix("abi").tempdir()?;
    let exe = tmpdir.path().join(name);
    let c_file = Path::new("tests").join(name).with_extension("c");

    let cc = Compiler::new().expect("configured compiler");
    cc.compile(&c_file, &exe)?;

    let mut cmd = Command::new(exe);
    cmd.stderr(Stdio::inherit());
    let out = cmd.output()?;
    if !out.status.success() {
        let (status, stdout) = (out.status, String::from_utf8_lossy(&out.stdout));
        return Err(format!("command {cmd:?} failed, {status:?}\nstdout: {stdout}").into());
    }

    Ok(String::from_utf8(out.stdout)?)
}

const RUST_LAYOUTS: &[(&str, Layout)] = &[
    (
        "PanelActionMuxerClass",
        Layout {
            size: size_of::<PanelActionMuxerClass>(),
            alignment: align_of::<PanelActionMuxerClass>(),
        },
    ),
    (
        "PanelApplication",
        Layout {
            size: size_of::<PanelApplication>(),
            alignment: align_of::<PanelApplication>(),
        },
    ),
    (
        "PanelApplicationClass",
        Layout {
            size: size_of::<PanelApplicationClass>(),
            alignment: align_of::<PanelApplicationClass>(),
        },
    ),
    (
        "PanelArea",
        Layout {
            size: size_of::<PanelArea>(),
            alignment: align_of::<PanelArea>(),
        },
    ),
    (
        "PanelDock",
        Layout {
            size: size_of::<PanelDock>(),
            alignment: align_of::<PanelDock>(),
        },
    ),
    (
        "PanelDockClass",
        Layout {
            size: size_of::<PanelDockClass>(),
            alignment: align_of::<PanelDockClass>(),
        },
    ),
    (
        "PanelDocumentWorkspace",
        Layout {
            size: size_of::<PanelDocumentWorkspace>(),
            alignment: align_of::<PanelDocumentWorkspace>(),
        },
    ),
    (
        "PanelDocumentWorkspaceClass",
        Layout {
            size: size_of::<PanelDocumentWorkspaceClass>(),
            alignment: align_of::<PanelDocumentWorkspaceClass>(),
        },
    ),
    (
        "PanelFrame",
        Layout {
            size: size_of::<PanelFrame>(),
            alignment: align_of::<PanelFrame>(),
        },
    ),
    (
        "PanelFrameClass",
        Layout {
            size: size_of::<PanelFrameClass>(),
            alignment: align_of::<PanelFrameClass>(),
        },
    ),
    (
        "PanelFrameHeaderBarClass",
        Layout {
            size: size_of::<PanelFrameHeaderBarClass>(),
            alignment: align_of::<PanelFrameHeaderBarClass>(),
        },
    ),
    (
        "PanelFrameHeaderInterface",
        Layout {
            size: size_of::<PanelFrameHeaderInterface>(),
            alignment: align_of::<PanelFrameHeaderInterface>(),
        },
    ),
    (
        "PanelFrameSwitcherClass",
        Layout {
            size: size_of::<PanelFrameSwitcherClass>(),
            alignment: align_of::<PanelFrameSwitcherClass>(),
        },
    ),
    (
        "PanelFrameTabBarClass",
        Layout {
            size: size_of::<PanelFrameTabBarClass>(),
            alignment: align_of::<PanelFrameTabBarClass>(),
        },
    ),
    (
        "PanelGSettingsActionGroupClass",
        Layout {
            size: size_of::<PanelGSettingsActionGroupClass>(),
            alignment: align_of::<PanelGSettingsActionGroupClass>(),
        },
    ),
    (
        "PanelGrid",
        Layout {
            size: size_of::<PanelGrid>(),
            alignment: align_of::<PanelGrid>(),
        },
    ),
    (
        "PanelGridClass",
        Layout {
            size: size_of::<PanelGridClass>(),
            alignment: align_of::<PanelGridClass>(),
        },
    ),
    (
        "PanelGridColumnClass",
        Layout {
            size: size_of::<PanelGridColumnClass>(),
            alignment: align_of::<PanelGridColumnClass>(),
        },
    ),
    (
        "PanelInhibitorClass",
        Layout {
            size: size_of::<PanelInhibitorClass>(),
            alignment: align_of::<PanelInhibitorClass>(),
        },
    ),
    (
        "PanelLayeredSettingsClass",
        Layout {
            size: size_of::<PanelLayeredSettingsClass>(),
            alignment: align_of::<PanelLayeredSettingsClass>(),
        },
    ),
    (
        "PanelMenuManagerClass",
        Layout {
            size: size_of::<PanelMenuManagerClass>(),
            alignment: align_of::<PanelMenuManagerClass>(),
        },
    ),
    (
        "PanelOmniBar",
        Layout {
            size: size_of::<PanelOmniBar>(),
            alignment: align_of::<PanelOmniBar>(),
        },
    ),
    (
        "PanelOmniBarClass",
        Layout {
            size: size_of::<PanelOmniBarClass>(),
            alignment: align_of::<PanelOmniBarClass>(),
        },
    ),
    (
        "PanelPanedClass",
        Layout {
            size: size_of::<PanelPanedClass>(),
            alignment: align_of::<PanelPanedClass>(),
        },
    ),
    (
        "PanelPositionClass",
        Layout {
            size: size_of::<PanelPositionClass>(),
            alignment: align_of::<PanelPositionClass>(),
        },
    ),
    (
        "PanelSaveDelegate",
        Layout {
            size: size_of::<PanelSaveDelegate>(),
            alignment: align_of::<PanelSaveDelegate>(),
        },
    ),
    (
        "PanelSaveDelegateClass",
        Layout {
            size: size_of::<PanelSaveDelegateClass>(),
            alignment: align_of::<PanelSaveDelegateClass>(),
        },
    ),
    (
        "PanelSaveDialogClass",
        Layout {
            size: size_of::<PanelSaveDialogClass>(),
            alignment: align_of::<PanelSaveDialogClass>(),
        },
    ),
    (
        "PanelSessionClass",
        Layout {
            size: size_of::<PanelSessionClass>(),
            alignment: align_of::<PanelSessionClass>(),
        },
    ),
    (
        "PanelSessionItemClass",
        Layout {
            size: size_of::<PanelSessionItemClass>(),
            alignment: align_of::<PanelSessionItemClass>(),
        },
    ),
    (
        "PanelSettingsClass",
        Layout {
            size: size_of::<PanelSettingsClass>(),
            alignment: align_of::<PanelSettingsClass>(),
        },
    ),
    (
        "PanelStatusbarClass",
        Layout {
            size: size_of::<PanelStatusbarClass>(),
            alignment: align_of::<PanelStatusbarClass>(),
        },
    ),
    (
        "PanelThemeSelectorClass",
        Layout {
            size: size_of::<PanelThemeSelectorClass>(),
            alignment: align_of::<PanelThemeSelectorClass>(),
        },
    ),
    (
        "PanelToggleButtonClass",
        Layout {
            size: size_of::<PanelToggleButtonClass>(),
            alignment: align_of::<PanelToggleButtonClass>(),
        },
    ),
    (
        "PanelWidget",
        Layout {
            size: size_of::<PanelWidget>(),
            alignment: align_of::<PanelWidget>(),
        },
    ),
    (
        "PanelWidgetClass",
        Layout {
            size: size_of::<PanelWidgetClass>(),
            alignment: align_of::<PanelWidgetClass>(),
        },
    ),
    (
        "PanelWorkbench",
        Layout {
            size: size_of::<PanelWorkbench>(),
            alignment: align_of::<PanelWorkbench>(),
        },
    ),
    (
        "PanelWorkbenchClass",
        Layout {
            size: size_of::<PanelWorkbenchClass>(),
            alignment: align_of::<PanelWorkbenchClass>(),
        },
    ),
    (
        "PanelWorkspace",
        Layout {
            size: size_of::<PanelWorkspace>(),
            alignment: align_of::<PanelWorkspace>(),
        },
    ),
    (
        "PanelWorkspaceClass",
        Layout {
            size: size_of::<PanelWorkspaceClass>(),
            alignment: align_of::<PanelWorkspaceClass>(),
        },
    ),
];

const RUST_CONSTANTS: &[(&str, &str)] = &[
    ("(gint) PANEL_AREA_BOTTOM", "3"),
    ("(gint) PANEL_AREA_CENTER", "4"),
    ("(gint) PANEL_AREA_END", "1"),
    ("(gint) PANEL_AREA_START", "0"),
    ("(gint) PANEL_AREA_TOP", "2"),
    ("PANEL_MAJOR_VERSION", "1"),
    ("PANEL_MICRO_VERSION", "0"),
    ("PANEL_MINOR_VERSION", "3"),
    ("PANEL_VERSION_S", "1.3.0"),
    ("PANEL_WIDGET_KIND_ANY", "*"),
    ("PANEL_WIDGET_KIND_DOCUMENT", "document"),
    ("PANEL_WIDGET_KIND_UNKNOWN", "unknown"),
    ("PANEL_WIDGET_KIND_UTILITY", "utility"),
];
